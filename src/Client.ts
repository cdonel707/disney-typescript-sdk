/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import * as DisneyOpensource from "./api/index.js";
import urlJoin from "url-join";
import * as errors from "./errors/index.js";

export declare namespace DisneyOpensourceClient {
    export interface Options {
        environment?: core.Supplier<environments.DisneyOpensourceEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class DisneyOpensourceClient {
    constructor(protected readonly _options: DisneyOpensourceClient.Options = {}) {}

    /**
     * @param {DisneyOpensource.GetAllCharactersRequest} request
     * @param {DisneyOpensourceClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.getAllCharacters()
     */
    public getAllCharacters(
        request: DisneyOpensource.GetAllCharactersRequest = {},
        requestOptions?: DisneyOpensourceClient.RequestOptions,
    ): core.HttpResponsePromise<DisneyOpensource.CharacterList> {
        return core.HttpResponsePromise.fromPromise(this.__getAllCharacters(request, requestOptions));
    }

    private async __getAllCharacters(
        request: DisneyOpensource.GetAllCharactersRequest = {},
        requestOptions?: DisneyOpensourceClient.RequestOptions,
    ): Promise<core.WithRawResponse<DisneyOpensource.CharacterList>> {
        const { page, name } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (name != null) {
            _queryParams["name"] = name;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.DisneyOpensourceEnvironment.Default,
                "character",
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "disney",
                "X-Fern-SDK-Version": "0.0.2",
                "User-Agent": "disney/0.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as DisneyOpensource.CharacterList, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DisneyOpensourceError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DisneyOpensourceError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.DisneyOpensourceTimeoutError("Timeout exceeded when calling GET /character.");
            case "unknown":
                throw new errors.DisneyOpensourceError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} id
     * @param {DisneyOpensourceClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.getCharacterById("id")
     */
    public getCharacterById(
        id: string,
        requestOptions?: DisneyOpensourceClient.RequestOptions,
    ): core.HttpResponsePromise<DisneyOpensource.Character> {
        return core.HttpResponsePromise.fromPromise(this.__getCharacterById(id, requestOptions));
    }

    private async __getCharacterById(
        id: string,
        requestOptions?: DisneyOpensourceClient.RequestOptions,
    ): Promise<core.WithRawResponse<DisneyOpensource.Character>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.DisneyOpensourceEnvironment.Default,
                `character/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "disney",
                "X-Fern-SDK-Version": "0.0.2",
                "User-Agent": "disney/0.0.2",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as DisneyOpensource.Character, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DisneyOpensourceError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DisneyOpensourceError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.DisneyOpensourceTimeoutError("Timeout exceeded when calling GET /character/{id}.");
            case "unknown":
                throw new errors.DisneyOpensourceError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}

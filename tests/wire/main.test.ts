/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { DisneyOpensourceClient } from "../../src/Client";

describe("DisneyOpensourceClient", () => {
    test("getAllCharacters", async () => {
        const server = mockServerPool.createServer();
        const client = new DisneyOpensourceClient({ environment: server.baseUrl });

        const rawResponseBody = {
            totalPages: 1,
            nextPage: "nextPage",
            previousPage: "previousPage",
            data: [
                {
                    _id: "_id",
                    name: "name",
                    films: ["films"],
                    shortFilms: ["shortFilms"],
                    tvShows: ["tvShows"],
                    videoGames: ["videoGames"],
                    parkAttractions: ["parkAttractions"],
                    allies: ["allies"],
                    enemies: ["enemies"],
                    imageUrl: "imageUrl",
                    createdAt: "createdAt",
                    updatedAt: "updatedAt",
                },
            ],
        };
        server.mockEndpoint().get("/character").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.getAllCharacters();
        expect(response).toEqual({
            totalPages: 1,
            nextPage: "nextPage",
            previousPage: "previousPage",
            data: [
                {
                    _id: "_id",
                    name: "name",
                    films: ["films"],
                    shortFilms: ["shortFilms"],
                    tvShows: ["tvShows"],
                    videoGames: ["videoGames"],
                    parkAttractions: ["parkAttractions"],
                    allies: ["allies"],
                    enemies: ["enemies"],
                    imageUrl: "imageUrl",
                    createdAt: "createdAt",
                    updatedAt: "updatedAt",
                },
            ],
        });
    });

    test("getCharacterById", async () => {
        const server = mockServerPool.createServer();
        const client = new DisneyOpensourceClient({ environment: server.baseUrl });

        const rawResponseBody = {
            _id: "_id",
            name: "name",
            films: ["films"],
            shortFilms: ["shortFilms"],
            tvShows: ["tvShows"],
            videoGames: ["videoGames"],
            parkAttractions: ["parkAttractions"],
            allies: ["allies"],
            enemies: ["enemies"],
            imageUrl: "imageUrl",
            createdAt: "createdAt",
            updatedAt: "updatedAt",
        };
        server.mockEndpoint().get("/character/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.getCharacterById("id");
        expect(response).toEqual({
            _id: "_id",
            name: "name",
            films: ["films"],
            shortFilms: ["shortFilms"],
            tvShows: ["tvShows"],
            videoGames: ["videoGames"],
            parkAttractions: ["parkAttractions"],
            allies: ["allies"],
            enemies: ["enemies"],
            imageUrl: "imageUrl",
            createdAt: "createdAt",
            updatedAt: "updatedAt",
        });
    });
});
